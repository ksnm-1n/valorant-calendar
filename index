<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Valorant Deathmatch Calendar</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Rajdhani:wght@300;400;500;600;700&display=swap');

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Rajdhani', sans-serif;
      background: linear-gradient(135deg, #0a0a0a 0%, #1a0829 25%, #0d1b2a  50%, #415a77 75%, #0a0a0a 100%);
      background-size: 400% 400%;
      animation: gradientShift 15s ease infinite;
      color: #ff4757;
      min-height: 100vh;
      overflow-x: hidden;
      position: relative;
    }

    @keyframes gradientShift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    /* Animated background particles */
    .bg-particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
    }

    .particle {
      position: absolute;
      width: 2px;
      height: 2px;
      background: #00d4ff;
      border-radius: 50%;
      animation: float 20s infinite linear;
      opacity: 0.6;
    }

    @keyframes float {
      0% {
        transform: translateY(100vh) translateX(0px);
        opacity: 0;
      }
      10% {
        opacity: 0.8;
      }
      90% {
        opacity: 0.8;
      }
      100% {
        transform: translateY(-10vh) translateX(100px);
        opacity: 0;
      }
    }

    /* Sparkling stars */
    .stars {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 3;
    }

    .star {
      position: absolute;
      color: #ffd700;
      font-size: 12px;
      animation: sparkle 3s infinite;
    }

    @keyframes sparkle {
      0%, 100% {
        opacity: 0;
        transform: rotate(0deg) scale(0.5);
      }
      50% {
        opacity: 1;
        transform: rotate(180deg) scale(1.2);
      }
    }

    /* UFO animations - made larger */
    .ufo {
      position: absolute;
      width: 60px;
      height: 40px;
      opacity: 0.8;
      z-index: 5;
      font-size: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .ufo1 {
      animation: flyUFO1 25s linear infinite;
      top: 15%;
    }

    .ufo2 {
      animation: flyUFO2 30s linear infinite;
      top: 70%;
    }

    .ufo3 {
      animation: flyUFO3 35s linear infinite;
      top: 40%;
    }

    @keyframes flyUFO1 {
      0% {
        left: -80px;
        transform: translateY(0px);
      }
      25% {
        transform: translateY(-20px);
      }
      50% {
        transform: translateY(10px);
      }
      75% {
        transform: translateY(-15px);
      }
      100% {
        left: 100vw;
        transform: translateY(0px);
      }
    }

    @keyframes flyUFO2 {
      0% {
        right: -80px;
        transform: translateY(0px) scaleX(-1);
      }
      30% {
        transform: translateY(15px) scaleX(-1);
      }
      60% {
        transform: translateY(-10px) scaleX(-1);
      }
      90% {
        transform: translateY(5px) scaleX(-1);
      }
      100% {
        right: 100vw;
        transform: translateY(0px) scaleX(-1);
      }
    }

    @keyframes flyUFO3 {
      0% {
        left: -80px;
        transform: translateY(0px) scale(0.8);
      }
      20% {
        transform: translateY(-25px) scale(0.8);
      }
      40% {
        transform: translateY(5px) scale(0.8);
      }
      60% {
        transform: translateY(-15px) scale(0.8);
      }
      80% {
        transform: translateY(10px) scale(0.8);
      }
      100% {
        left: 100vw;
        transform: translateY(0px) scale(0.8);
      }
    }

    /* Hexagonal grid overlay */
    .hex-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: 
        radial-gradient(circle at 25% 25%, rgba(0, 212, 255, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 75% 75%, rgba(255, 71, 87, 0.1) 0%, transparent 50%);
      pointer-events: none;
      z-index: 2;
    }

    .container {
      position: relative;
      z-index: 10;
      padding: 15px;
      text-align: center;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 15px;
    }

    .main-content {
      display: flex;
      align-items: flex-start;
      justify-content: center;
      gap: 30px;
      flex-wrap: wrap;
      position: relative;
    }

    h1 {
      font-family: 'Orbitron', monospace;
      font-size: 2.2em;
      font-weight: 900;
      margin: 0;
      background: linear-gradient(45deg, #ff4757, #00d4ff, #ff6b35);
      background-size: 300% 300%;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      animation: textGlow 3s ease-in-out infinite alternate;
      text-shadow: 0 0 30px rgba(255, 71, 87, 0.5);
    }

    @keyframes textGlow {
      0% {
        background-position: 0% 50%;
        filter: drop-shadow(0 0 10px rgba(255, 71, 87, 0.8));
      }
      100% {
        background-position: 100% 50%;
        filter: drop-shadow(0 0 20px rgba(0, 212, 255, 0.8));
      }
    }

    .subtitle {
      font-size: 1.2em;
      font-weight: 500;
      margin-bottom: 30px;
      color: #ffffff;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
      letter-spacing: 1px;
    }

    .controls {
      margin: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }

    button {
      padding: 12px 24px;
      font-size: 14px;
      font-weight: 600;
      background: linear-gradient(45deg, rgba(0, 212, 255, 0.2), rgba(255, 71, 87, 0.2));
      color: #ffffff;
      border: 2px solid transparent;
      background-clip: padding-box;
      font-family: 'Rajdhani', sans-serif;
      cursor: pointer;
      border-radius: 8px;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    button:hover::before {
      left: 100%;
    }

    button:hover {
      box-shadow: 0 0 20px rgba(0, 212, 255, 0.5);
      border-color: #00d4ff;
      transform: translateY(-2px);
    }

    #monthLabel {
      font-family: 'Orbitron', monospace;
      font-size: 1.4em;
      font-weight: 700;
      color: #00d4ff;
      text-shadow: 0 0 15px rgba(0, 212, 255, 0.6);
      min-width: 200px;
    }

    .calendar-wrapper {
      background: rgba(10, 10, 10, 0.8);
      border-radius: 15px;
      padding: 20px;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 71, 87, 0.3);
      box-shadow: 
        0 0 50px rgba(255, 71, 87, 0.2),
        inset 0 0 50px rgba(0, 212, 255, 0.1);
      width: 400px;
      height: 440px; /* 固定高さを設定 */
    }

    .calendar-content {
      height: 100%;
      display: flex;
      flex-direction: column;
    }

    table {
      border-collapse: separate;
      border-spacing: 4px;
      margin: 0 auto;
      width: 100%;
      flex-grow: 1;
      height: 100%; /* テーブルを親の高さに合わせる */
    }

    .calendar-title {
      font-family: 'Orbitron', monospace;
      font-size: 1.2em;
      font-weight: 700;
      margin-bottom: 15px;
      color: #ffffff;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
      flex-shrink: 0; /* タイトルの高さを固定 */
    }

    th, td {
      width: 50px;
      height: 50px;
      text-align: center;
      vertical-align: middle;
      cursor: pointer;
      font-weight: 600;
      border-radius: 8px;
      position: relative;
      transition: all 0.3s ease;
      font-size: 13px;
    }

    th {
      background: linear-gradient(135deg, rgba(255, 71, 87, 0.3), rgba(0, 212, 255, 0.3));
      color: #ffffff;
      font-weight: 700;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    td {
      background: rgba(20, 20, 30, 0.6);
      color: #ffffff;
      border: 1px solid rgba(255, 71, 87, 0.2);
      backdrop-filter: blur(5px);
    }

    td:hover {
      background: rgba(255, 71, 87, 0.2);
      border-color: #ff4757;
      box-shadow: 0 0 15px rgba(255, 71, 87, 0.4);
      transform: scale(1.05);
    }

    td.stamped {
      background: linear-gradient(135deg, #ffd700, #ffed4e);
      color: #1a1a1a;
      font-weight: 700;
      border-color: #ffd700;
      box-shadow: 
        0 0 20px rgba(255, 215, 0, 0.6),
        inset 0 0 20px rgba(255, 255, 255, 0.3);
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% {
        box-shadow: 0 0 20px rgba(255, 215, 0, 0.6);
      }
      50% {
        box-shadow: 0 0 30px rgba(255, 215, 0, 0.9);
      }
      100% {
        box-shadow: 0 0 20px rgba(255, 215, 0, 0.6);
      }
    }

    td.stamped:hover {
      transform: scale(1.1);
      background: linear-gradient(135deg, #fff700, #ffd700);
    }

    .medal {
      font-size: 1.2em;
      display: block;
      animation: bounce 2s infinite;
    }

    @keyframes bounce {
      0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
      }
      40% {
        transform: translateY(-5px);
      }
      60% {
        transform: translateY(-3px);
      }
    }

    /* Stats section */
    .stats {
      margin: 0;
      padding: 15px 20px;
      background: rgba(10, 10, 10, 0.6);
      border-radius: 15px;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(0, 212, 255, 0.3);
      display: inline-block;
      min-width: 220px;
      align-self: flex-start;
    }

    .stats h3 {
      color: #00d4ff;
      font-family: 'Orbitron', monospace;
      margin-bottom: 12px;
      font-size: 1em;
    }

    .stat-item {
      display: flex;
      justify-content: space-between;
      margin: 6px 0;
      color: #ffffff;
      font-weight: 500;
    }

    .stat-value {
      color: #ffd700;
      font-weight: 700;
    }

    /* Responsive design */
    @media (max-width: 768px) {
      h1 {
        font-size: 2em;
      }
      .calendar-wrapper {
        padding: 15px;
        width: 320px;
        height: 380px; /* モバイル用の固定高さ */
      }
      th, td {
        width: 40px;
        height: 40px;
        font-size: 11px;
      }
      .controls {
        flex-direction: column;
        gap: 15px;
      }
      .main-content {
        flex-direction: column;
        align-items: center;
      }
      .ufo {
        font-size: 40px;
        width: 40px;
        height: 30px;
      }
    }

    @media (max-width: 480px) {
      .calendar-wrapper {
        width: 280px;
        height: 340px; /* 小さいモバイル用の固定高さ */
        padding: 10px;
      }
      th, td {
        width: 35px;
        height: 35px;
        font-size: 10px;
      }
      .medal {
        font-size: 1em;
      }
    }
  </style>
</head>
<body>
  <div class="bg-particles" id="particles"></div>
  <div class="stars" id="stars"></div>
  <div class="hex-overlay"></div>
  
  <!-- Flying UFOs -->
  <div class="ufo ufo1">🛸</div>
  <div class="ufo ufo2">🛸</div>
  <div class="ufo ufo3">🛸</div>
  
  <div class="container">
    <h1>VALORANT DEATHMATCH CALENDAR</h1>
    
    <div class="controls">
      <button id="prevMonth">← PREV MONTH</button>
      <span id="monthLabel"></span>
      <button id="nextMonth">NEXT MONTH →</button>
    </div>
    
    <div class="main-content">
      <div class="calendar-wrapper">
        <div class="calendar-content" id="calendar"></div>
      </div>

      <div class="stats" id="stats">
        <h3>MONTHLY STATS</h3>
        <div class="stat-item">
          <span>Wins This Month:</span>
          <span class="stat-value" id="monthWins">0</span>
        </div>
        <div class="stat-item">
          <span>Win Streak:</span>
          <span class="stat-value" id="winStreak">0</span>
        </div>
        <div class="stat-item">
          <span>Best Month:</span>
          <span class="stat-value" id="bestMonth">-</span>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Create floating particles
    function createParticles() {
      const particlesContainer = document.getElementById('particles');
      for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 20 + 's';
        particle.style.animationDuration = (Math.random() * 10 + 15) + 's';
        particlesContainer.appendChild(particle);
      }
    }

    // Create sparkling stars
    function createStars() {
      const starsContainer = document.getElementById('stars');
      const starSymbols = ['✨', '⭐', '💫', '🌟', '✦', '✧'];
      
      for (let i = 0; i < 30; i++) {
        const star = document.createElement('div');
        star.className = 'star';
        star.textContent = starSymbols[Math.floor(Math.random() * starSymbols.length)];
        star.style.left = Math.random() * 100 + '%';
        star.style.top = Math.random() * 100 + '%';
        star.style.animationDelay = Math.random() * 3 + 's';
        star.style.animationDuration = (Math.random() * 2 + 2) + 's';
        starsContainer.appendChild(star);
      }
    }

    createParticles();
    createStars();

    const calendarEl = document.getElementById("calendar");
    const monthLabel = document.getElementById("monthLabel");
    const monthWinsEl = document.getElementById("monthWins");
    const winStreakEl = document.getElementById("winStreak");
    const bestMonthEl = document.getElementById("bestMonth");
    let current = new Date();

    // Use memory storage instead of localStorage
    let stampedDays = {};

    function calculateStats(year, month) {
      const keyPrefix = `${year}-${month}`;
      const currentMonthWins = (stampedDays[keyPrefix] || []).length;
      
      // Calculate best month
      let bestMonth = '';
      let maxWins = 0;
      for (const [key, wins] of Object.entries(stampedDays)) {
        if (wins.length > maxWins) {
          maxWins = wins.length;
          const [y, m] = key.split('-');
          bestMonth = `${y}年${parseInt(m) + 1}月 (${maxWins}勝)`;
        }
      }

      // Calculate current win streak (consecutive days from today backwards)
      const today = new Date();
      let streak = 0;
      if (year === today.getFullYear() && month === today.getMonth()) {
        const todayDate = today.getDate();
        const stamped = stampedDays[keyPrefix] || [];
        for (let day = todayDate; day >= 1; day--) {
          if (stamped.includes(day)) {
            streak++;
          } else {
            break;
          }
        }
      }

      monthWinsEl.textContent = currentMonthWins;
      winStreakEl.textContent = streak;
      bestMonthEl.textContent = bestMonth || '-';
    }

    function renderCalendar(year, month) {
      const daysInMonth = new Date(year, month + 1, 0).getDate();
      const startDay = new Date(year, month, 1).getDay();
      
      let table = '<div class="calendar-title">' + year + '年 ' + (month + 1) + '月</div>';
      table += '<table><tr>';
      
      const weekDays = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
      for (let d of weekDays) table += `<th>${d}</th>`;
      table += "</tr>";

      let dayCount = 0;
      const keyPrefix = `${year}-${month}`;
      const stamped = stampedDays[keyPrefix] || [];

      // 常に6行分のカレンダーを作成（固定高さのため）
      for (let week = 0; week < 6; week++) {
        table += "<tr>";
        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {
          if (week === 0 && dayOfWeek < startDay) {
            // 月の最初の週の空白セル
            table += "<td></td>";
            dayCount++;
          } else {
            const day = dayCount - startDay + 1;
            if (day <= daysInMonth) {
              const isStamped = stamped.includes(day);
              table += `<td data-day="${day}" class="${isStamped ? 'stamped' : ''}">${day}${isStamped ? '<span class="medal">🥇</span>' : ''}</td>`;
            } else {
              // 月の最後の週の空白セル
              table += "<td></td>";
            }
            dayCount++;
          }
        }
        table += "</tr>";
      }
      
      table += "</table>";
      calendarEl.innerHTML = table;
      monthLabel.textContent = `${year}年 ${month + 1}月`;

      // Add click handlers
      document.querySelectorAll("td[data-day]").forEach((td) => {
        const day = Number(td.dataset.day);
        td.addEventListener("click", () => {
          if (!stampedDays[keyPrefix]) stampedDays[keyPrefix] = [];
          const stamped = stampedDays[keyPrefix];
          
          if (td.classList.contains("stamped")) {
            td.innerHTML = day;
            td.classList.remove("stamped");
            const index = stamped.indexOf(day);
            if (index !== -1) stamped.splice(index, 1);
          } else {
            td.innerHTML = `${day}<span class="medal">🥇</span>`;
            td.classList.add("stamped");
            stamped.push(day);
          }
          calculateStats(year, month);
        });
      });

      calculateStats(year, month);
    }

    document.getElementById("prevMonth").addEventListener("click", () => {
      current.setMonth(current.getMonth() - 1);
      renderCalendar(current.getFullYear(), current.getMonth());
    });

    document.getElementById("nextMonth").addEventListener("click", () => {
      current.setMonth(current.getMonth() + 1);
      renderCalendar(current.getFullYear(), current.getMonth());
    });

    renderCalendar(current.getFullYear(), current.getMonth());
  </script>
</body>
</html>
